{"version":3,"file":"7.6f23b5ef.js","sources":["../../../../../../../../node_modules/@sveltejs/kit/src/runtime/app/navigation.js","../../../../../../src/routes/s/+page.ts","../../../../../../src/routes/s/+page.svelte"],"sourcesContent":["import { client_method } from '../client/singletons.js';\n\n/**\n * If called when the page is being updated following a navigation (in `onMount` or `afterNavigate` or an action, for example), this disables SvelteKit's built-in scroll handling.\n * This is generally discouraged, since it breaks user expectations.\n * @returns {void}\n */\nexport const disableScrollHandling = /* @__PURE__ */ client_method('disable_scroll_handling');\n\n/**\n * Returns a Promise that resolves when SvelteKit navigates (or fails to navigate, in which case the promise rejects) to the specified `url`.\n * For external URLs, use `window.location = url` instead of calling `goto(url)`.\n *\n * @type {(url: string | URL, opts?: {\n *   replaceState?: boolean;\n *   noScroll?: boolean;\n *   keepFocus?: boolean;\n *   invalidateAll?: boolean;\n *   state?: any\n * }) => Promise<void>}\n * @param {string | URL} url Where to navigate to. Note that if you've set [`config.kit.paths.base`](https://kit.svelte.dev/docs/configuration#paths) and the URL is root-relative, you need to prepend the base path if you want to navigate within the app.\n * @param {Object} [opts] Options related to the navigation\n * @param {boolean} [opts.replaceState] If `true`, will replace the current `history` entry rather than creating a new one with `pushState`\n * @param {boolean} [opts.noScroll] If `true`, the browser will maintain its scroll position rather than scrolling to the top of the page after navigation\n * @param {boolean} [opts.keepFocus] If `true`, the currently focused element will retain focus after navigation. Otherwise, focus will be reset to the body\n * @param {boolean} [invalidateAll] If `true`, all `load` functions of the page will be rerun. See https://kit.svelte.dev/docs/load#rerunning-load-functions for more info on invalidation.\n * @param {any} [opts.state] The state of the new/updated history entry\n * @returns {Promise<void>}\n */\nexport const goto = /* @__PURE__ */ client_method('goto');\n\n/**\n * Causes any `load` functions belonging to the currently active page to re-run if they depend on the `url` in question, via `fetch` or `depends`. Returns a `Promise` that resolves when the page is subsequently updated.\n *\n * If the argument is given as a `string` or `URL`, it must resolve to the same URL that was passed to `fetch` or `depends` (including query parameters).\n * To create a custom identifier, use a string beginning with `[a-z]+:` (e.g. `custom:state`) — this is a valid URL.\n *\n * The `function` argument can be used define a custom predicate. It receives the full `URL` and causes `load` to rerun if `true` is returned.\n * This can be useful if you want to invalidate based on a pattern instead of a exact match.\n *\n * ```ts\n * // Example: Match '/path' regardless of the query parameters\n * import { invalidate } from '$app/navigation';\n *\n * invalidate((url) => url.pathname === '/path');\n * ```\n * @type {(url: string | URL | ((url: URL) => boolean)) => Promise<void>}\n * @param {string | URL | ((url: URL) => boolean)} url The invalidated URL\n * @returns {Promise<void>}\n */\nexport const invalidate = /* @__PURE__ */ client_method('invalidate');\n\n/**\n * Causes all `load` functions belonging to the currently active page to re-run. Returns a `Promise` that resolves when the page is subsequently updated.\n * @type {() => Promise<void>}\n * @returns {Promise<void>}\n */\nexport const invalidateAll = /* @__PURE__ */ client_method('invalidate_all');\n\n/**\n * Programmatically preloads the given page, which means\n *  1. ensuring that the code for the page is loaded, and\n *  2. calling the page's load function with the appropriate options.\n *\n * This is the same behaviour that SvelteKit triggers when the user taps or mouses over an `<a>` element with `data-sveltekit-preload-data`.\n * If the next navigation is to `href`, the values returned from load will be used, making navigation instantaneous.\n * Returns a Promise that resolves when the preload is complete.\n *\n * @type {(href: string) => Promise<void>}\n * @param {string} href Page to preload\n * @returns {Promise<void>}\n */\nexport const preloadData = /* @__PURE__ */ client_method('preload_data');\n\n/**\n * Programmatically imports the code for routes that haven't yet been fetched.\n * Typically, you might call this to speed up subsequent navigation.\n *\n * You can specify routes by any matching pathname such as `/about` (to match `src/routes/about/+page.svelte`) or `/blog/*` (to match `src/routes/blog/[slug]/+page.svelte`).\n *\n * Unlike `preloadData`, this won't call `load` functions.\n * Returns a Promise that resolves when the modules have been imported.\n *\n * @type {(...urls: string[]) => Promise<void>}\n * @param {...string[]} urls\n * @returns {Promise<void>}\n */\nexport const preloadCode = /* @__PURE__ */ client_method('preload_code');\n\n/**\n * A navigation interceptor that triggers before we navigate to a new URL, whether by clicking a link, calling `goto(...)`, or using the browser back/forward controls.\n * Calling `cancel()` will prevent the navigation from completing. If the navigation would have directly unloaded the current page, calling `cancel` will trigger the native\n * browser unload confirmation dialog. In these cases, `navigation.willUnload` is `true`.\n *\n * When a navigation isn't client side, `navigation.to.route.id` will be `null`.\n *\n * `beforeNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @type {(callback: (navigation: import('@sveltejs/kit').BeforeNavigate) => void) => void}\n * @param {(navigation: import('@sveltejs/kit').BeforeNavigate) => void} callback\n * @returns {void}\n */\nexport const beforeNavigate = /* @__PURE__ */ client_method('before_navigate');\n\n/**\n * A lifecycle function that runs the supplied `callback` immediately before we navigate to a new URL.\n *\n * If you return a `Promise`, SvelteKit will wait for it to resolve before completing the navigation. This allows you to — for example — use `document.startViewTransition`. Avoid promises that are slow to resolve, since navigation will appear stalled to the user.\n *\n * If a function (or a `Promise` that resolves to a function) is returned from the callback, it will be called once the DOM has updated.\n *\n * `onNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @type {(callback: (navigation: import('@sveltejs/kit').OnNavigate) => import('../../types/internal.js').MaybePromise<(() => void) | void>) => void}\n * @param {(navigation: import('@sveltejs/kit').OnNavigate) => void} callback\n * @returns {void}\n */\nexport const onNavigate = /* @__PURE__ */ client_method('on_navigate');\n\n/**\n * A lifecycle function that runs the supplied `callback` when the current component mounts, and also whenever we navigate to a new URL.\n *\n * `afterNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @type {(callback: (navigation: import('@sveltejs/kit').AfterNavigate) => void) => void}\n * @param {(navigation: import('@sveltejs/kit').AfterNavigate) => void} callback\n * @returns {void}\n */\nexport const afterNavigate = /* @__PURE__ */ client_method('after_navigate');\n","// since there's no dynamic data here, we can prerender\n// it so that it gets served as a static asset in production\nexport const ssr = false;\nexport const prerender = true;\n\nexport async function load({ url }) { \n\tlet q = url.searchParams.get('q') || undefined;\n\tlet addr = url.searchParams.get('addr') || undefined;\n\treturn { q, addr };\n}","<script>\n\timport { page } from '$app/stores';\n\timport { goto } from '$app/navigation';\n\timport arrow_down from '$lib/images/arrow_down.svg';\n\timport month from '$lib/images/month.svg';\n\timport wallet from '$lib/images/wallet.svg';\n\timport lock_clock from '$lib/images/lock_clock.svg';\n\timport chart from '$lib/images/chart.svg';\n\timport table from '$lib/images/table.svg';\n\timport share from '$lib/images/share.svg';\n\timport { _ } from 'svelte-i18n';\n\timport { toast } from '@zerodevx/svelte-toast';\n\timport CopyToClipboard from '$lib/CopyToClipboard.svelte';\n\timport {\n\t\tbinToBase64,\n\t\tbase64ToBin,\n\t\tlockingBytecodeToCashAddress,\n\t\tcashAddressToLockingBytecode\n\t} from '@bitauth/libauth';\n\timport { Perpetuity, sanitizeAddress } from '@unspent/phi';\n\timport { deflate, inflate } from 'pako';\n\timport ContractChartSection from '$lib/ContractChartSection.svelte';\n\timport UtxoSection from '$lib/UtxoSection.svelte';\n\n\texport let data;\n\texport let p;\n\tlet balance;\n\tlet utxoCount;\n\tlet receiptAddress;\n\tlet contract;\n\tlet receiptAddressValid = false;\n\n\tif (data.q) {\n\t\tif (!receiptAddress) {\n\t\t\tlet bytecode = inflate(base64ToBin(encodeURI(data.q)));\n\t\t\treceiptAddress = lockingBytecodeToCashAddress(bytecode);\n\t\t\treceiptAddressValid = true;\n\t\t\tcreateContract(false);\n\t\t}\n\t}\n\n\tasync function createContract(save = true) {\n\t\tif (receiptAddress) {\n\t\t\ttry {\n\t\t\t\ttry {\n\t\t\t\t\treceiptAddress = await sanitizeAddress(receiptAddress);\n\t\t\t\t\treceiptAddressValid = true;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treceiptAddressValid = false;\n\t\t\t\t\tif (e.message) {\n\t\t\t\t\t\ttoast.push(e.message, { classes: ['warn'] });\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttoast.push(e, { classes: ['warn'] });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontract = new Perpetuity(4383, receiptAddress, 1500, 96);\n\t\t\t\tupdateBalance();\n\n\t\t\t\tlet bytecode = cashAddressToLockingBytecode(receiptAddress).bytecode;\n\t\t\t\tlet q = decodeURI(binToBase64(deflate(bytecode)));\n\t\t\t\t$page.url.searchParams.set('q', q);\n\n\t\t\t\tgoto(`?${$page.url.searchParams.toString()}`);\n\t\t\t} catch (e) {\n\t\t\t\tcontract = undefined;\n\n\t\t\t\tif (e.message) {\n\t\t\t\t\ttoast.push(e.message, { classes: ['warn'] });\n\t\t\t\t} else {\n\t\t\t\t\ttoast.push(e, { classes: ['warn'] });\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tcontract = undefined;\n\t\t\tbalance = undefined;\n\t\t}\n\t}\n\n\tconst updateBalance = async () => {\n\t\tif (contract) balance = await contract.getBalance();\n\t\tif (contract) utxoCount = (await contract.getUtxos()).length;\n\t};\n</script>\n\n<svelte:head>\n\t<title>∑ ₿ᵪ</title>\n\t<meta name=\"description\" content=\"Unspent Cash\" />\n</svelte:head>\n<h4><img src={share} alt=\"share\" /></h4>\n<section>\n\t<table>\n\t\t<tr>\n\t\t\t{#if balance}\n\t\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t\t{#if utxoCount > 0}\n\t\t\t\t\t\t<b>{utxoCount} UTXO(s)</b>\n\t\t\t\t\t{/if}\n\t\t\t\t</td>\n\t\t\t\t<td colspan=\"3\">\n\t\t\t\t\t<b>{balance.toLocaleString()}</b> sats <br />\n\t\t\t\t\t(<i\n\t\t\t\t\t\t>{(Number(balance) / 100000000).toLocaleString(undefined, {\n\t\t\t\t\t\t\tminimumSignificantDigits: 6\n\t\t\t\t\t\t})}</i\n\t\t\t\t\t> BCH)\n\t\t\t\t</td>\n\t\t\t{:else}\n\t\t\t\t<td colspan=\"4\" />\n\t\t\t{/if}\n\t\t</tr>\n\t\t<tr>\n\t\t\t{#if contract}\n\t\t\t\t<td>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<img src={lock_clock} alt=\"lock_clock\" />\n\t\t\t\t\t</p>\n\t\t\t\t</td>\n\t\t\t\t<td colspan=\"3\">\n\t\t\t\t\t<CopyToClipboard on:copy={() => toast.push('📋🗸')} text={contract.getAddress()} let:copy>\n\t\t\t\t\t\t<div class=\"action\">\n\t\t\t\t\t\t\t<button on:click={copy}>\n\t\t\t\t\t\t\t\t{contract.getAddress()}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</CopyToClipboard>\n\t\t\t\t</td>\n\t\t\t{:else}\n\t\t\t\t<td colspan=\"4\">error</td>\n\t\t\t{/if}\n\t\t</tr>\n\t\t{#if receiptAddressValid}\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<p><img src={arrow_down} alt=\"to\" /></p>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<img src={month} alt=\"month\" />\n\t\t\t\t\t</p>\n\t\t\t\t</td>\n\t\t\t\t<td colspan=\"2\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<b>1.04% month</b>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<b>11.8% year</b>\n\t\t\t\t\t</p>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t{/if}\n\t\t<tr>\n\t\t\t<td />\n\t\t\t<td style=\"line-break:auto;\" colspan=\"3\" />\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t{#if receiptAddress}\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<img src={wallet} alt=\"wallet\" />\n\t\t\t\t\t</p>\n\t\t\t\t{/if}\n\t\t\t</td>\n\t\t\t<td style=\"line-break:anywhere;\" colspan=\"3\">\n\t\t\t\t<p>\n\t\t\t\t\t{#if receiptAddress}\n\t\t\t\t\t\t{receiptAddress}\n\t\t\t\t\t{/if}\n\t\t\t\t</p>\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n</section>\n<hr />\n<h4><img src={table} alt=\"table\" /></h4>\n<UtxoSection {receiptAddress} />\n<hr />\n<h4><img src={chart} alt=\"chart\" /></h4>\n<ContractChartSection {receiptAddress} />\n\n<style>\n\tsection {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tflex: 0.6;\n\t\tline-break: anywhere;\n\t}\n\n\t#form1 {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tflex: 0.6;\n\t}\n\n\ttable {\n\t\tborder: 1mm ridge rgba(192, 50, 220, 0.6);\n\t\tbackground-color: white;\n\t}\n\ttable tr td {\n\t\tmin-width: 20%;\n\t\tjustify-content: space-around;\n\t}\n\n\ttable tr td p {\n\t\tfont-size: small;\n\t\tdisplay: flex;\n\t\tjustify-content: space-around;\n\t}\n\n\ttable tr td pre {\n\t\twhite-space: pre-wrap;\n\t}\n\n\th1 {\n\t\twidth: 100%;\n\t}\n\n\ttextarea {\n\t\twidth: 100%;\n\t\theight: 100px;\n\t}\n</style>\n"],"names":["goto","client_method","ssr","prerender","load","url","q","addr","insert_hydration","target","td","anchor","t1_value","ctx","if_block","create_if_block_5","td0","td1","append_hydration","b","br","i","dirty","set_data","t1","t4","t4_value","lock_clock","copytoclipboard_changes","t_value","div","button","is_function","t","textContent","arrow_down","month","tr","wallet","p_1","share","table","chart","create_if_block_4","create_if_block_2","create_if_block_1","create_if_block","meta","h40","section","table_1","tr0","tr1","tr2","tr3","td2","td3","hr0","h41","hr1","h42","data","$$props","p","balance","utxoCount","receiptAddress","contract","receiptAddressValid","bytecode","inflate","base64ToBin","lockingBytecodeToCashAddress","createContract","save","sanitizeAddress","$$invalidate","e","toast","Perpetuity","updateBalance","cashAddressToLockingBytecode","binToBase64","deflate","$page"],"mappings":"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","x_google_ignoreList":[0]}